// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: MyScanner.flex

import java.io.*;

class Symbol {

	public String content;
	public TokenType tokenType;
	public int yyline, yycolumn;

	public Symbol( TokenType tokenType, int yyline, int yycolumn, String content ) {
		this.content = content;
		this.tokenType = tokenType;
		this.yyline = yyline;
		this.yycolumn = yycolumn;
	}

}

enum TokenType {

	INT, IF, SHORT, ELSE, LONG, SWITCH, FLOAT,
	CASE, DOUBLE, DEFAULT, CHAR, AUTO, STRING,
	VOLATILE, CONST, STATIC, FOR, GOTO, FOREACH,
	SIGNED, WHILE, BOOL, DO, VOID, IN, RETURN,
	BREAK, RECORD, CONTINUE, NEW, UNTIL, SIZEOF, FUNCTION,
     PRINTLN, TRUE, FALSE,
	LESSTHAN, MORETHAN,
	IDENTIFIER, OTHER, INTEGERLITERAL,
	FLOATLITERAL, ENTER, TAB,
	SPECIAL_CHARACTER,
	COMMENT, NORMAL_CHARACTER,
	NOTHING, EOF

}


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MyScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\7\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\23\1\1\7\1\10\2\1\2\11\1\12\2\11\1\13"+
    "\1\14\1\11\1\15\1\16\1\17\1\20\7\21\2\22"+
    "\1\11\1\23\1\24\1\25\1\26\1\27\1\1\6\30"+
    "\21\31\1\32\2\31\1\11\1\33\2\11\1\34\1\1"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\31\1\46\1\47\1\31\1\50\1\51\1\52"+
    "\1\31\1\53\1\54\1\55\1\56\1\57\1\60\1\32"+
    "\1\31\1\61\1\1\1\11\1\1\1\11\6\1\1\4"+
    "\u01a2\1\2\4\326\1\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
    "\5\5\2\7\1\10\1\11\22\12\1\13\1\14\1\13"+
    "\2\0\1\15\2\0\1\7\3\0\7\12\1\16\6\12"+
    "\1\17\1\20\14\12\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\15\0\2\36\2\0\1\15\13\12\1\37\2\12\1\40"+
    "\1\12\1\41\16\12\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\7"+
    "\1\56\1\57\1\12\1\60\1\61\4\12\1\62\4\12"+
    "\1\63\1\64\11\12\1\65\1\12\1\66\2\12\1\67"+
    "\1\70\3\12\1\71\1\72\5\12\1\73\5\12\1\74"+
    "\1\12\1\75\2\12\1\76\3\12\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\2\12\1\106\1\107\1\12"+
    "\1\110\1\12\1\111\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\226\0\226\0\310\0\372"+
    "\0\226\0\226\0\226\0\372\0\u012c\0\u015e\0\u0190\0\u01c2"+
    "\0\u01f4\0\u0226\0\372\0\372\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\226\0\226"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a"+
    "\0\u0258\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
    "\0\226\0\u0fa0\0\u0fd2\0\u1004\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u0258\0\u12f2\0\u0258\0\u1324\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\u0258\0\u0258\0\u15e0\0\u0258\0\u0258\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u0258\0\u16da\0\u170c\0\u173e\0\u1770\0\u0258"+
    "\0\u0258\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u1900\0\u1932\0\u0258\0\u1964\0\u0258\0\u1996\0\u19c8\0\u0258"+
    "\0\u0258\0\u19fa\0\u1a2c\0\u1a5e\0\u0258\0\u0258\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u0258\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u0258\0\u1c84\0\u0258\0\u1cb6\0\u1ce8\0\u0258\0\u1d1a"+
    "\0\u1d4c\0\u1d7e\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258\0\u0258"+
    "\0\u0258\0\u1db0\0\u1de2\0\u0258\0\u0258\0\u1e14\0\u0258\0\u1e46"+
    "\0\u0258\0\u0258\0\u0258";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\1\6\2\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\1\12\1\23\1\14\1\24\1\4\3\25\2\4\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\25\1\35"+
    "\1\25\1\36\1\37\1\25\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\25\3\47\4\0\1\47\1\50"+
    "\22\47\1\51\26\47\1\0\1\52\2\0\1\52\2\0"+
    "\20\52\1\0\3\52\1\53\1\52\1\0\21\52\1\0"+
    "\2\52\65\0\1\6\103\0\1\12\50\0\1\12\10\0"+
    "\1\12\51\0\1\12\7\0\1\12\54\0\3\54\52\0"+
    "\1\55\3\0\1\56\5\0\1\12\52\0\1\54\1\0"+
    "\2\57\1\60\7\0\1\61\6\0\1\62\36\0\1\54"+
    "\1\0\3\22\16\0\1\62\40\0\3\25\5\0\3\25"+
    "\1\0\26\25\20\0\3\25\5\0\3\25\1\0\22\25"+
    "\1\63\3\25\20\0\3\25\5\0\3\25\1\0\15\25"+
    "\1\64\1\25\1\65\6\25\20\0\3\25\5\0\3\25"+
    "\1\0\1\25\1\66\6\25\1\67\4\25\1\70\10\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\71\7\25"+
    "\1\72\10\25\20\0\3\25\5\0\3\25\1\0\13\25"+
    "\1\73\12\25\20\0\3\25\5\0\3\25\1\0\1\25"+
    "\1\74\11\25\1\75\1\25\1\76\4\25\1\77\3\25"+
    "\20\0\3\25\5\0\3\25\1\0\15\25\1\100\10\25"+
    "\20\0\3\25\5\0\3\25\1\0\6\25\1\101\5\25"+
    "\1\102\11\25\20\0\3\25\5\0\3\25\1\0\15\25"+
    "\1\103\10\25\20\0\3\25\5\0\3\25\1\0\5\25"+
    "\1\104\20\25\20\0\3\25\5\0\3\25\1\0\17\25"+
    "\1\105\6\25\20\0\3\25\5\0\3\25\1\0\5\25"+
    "\1\106\20\25\20\0\3\25\5\0\3\25\1\0\10\25"+
    "\1\107\1\110\7\25\1\111\2\25\1\112\1\25\20\0"+
    "\3\25\5\0\3\25\1\0\17\25\1\113\6\25\20\0"+
    "\3\25\5\0\3\25\1\0\14\25\1\114\11\25\20\0"+
    "\3\25\5\0\3\25\1\0\15\25\1\115\10\25\20\0"+
    "\3\25\5\0\3\25\1\0\10\25\1\116\15\25\10\0"+
    "\1\117\1\0\1\120\5\0\1\121\6\0\1\122\3\0"+
    "\1\123\1\0\1\124\1\125\3\0\1\126\5\0\1\127"+
    "\2\0\1\130\1\0\1\131\1\0\1\132\14\0\1\133"+
    "\57\0\1\134\1\0\1\135\5\0\1\136\6\0\1\137"+
    "\3\0\1\140\1\0\1\141\1\142\3\0\1\143\5\0"+
    "\1\144\2\0\1\145\1\0\1\146\1\0\1\147\22\0"+
    "\3\54\16\0\1\62\20\0\13\55\1\150\46\55\3\56"+
    "\1\151\2\56\1\152\53\56\16\0\1\54\1\0\2\57"+
    "\1\60\55\0\1\54\1\0\3\60\57\0\3\153\5\0"+
    "\1\153\4\0\6\153\33\0\2\154\2\0\3\155\57\0"+
    "\3\25\5\0\3\25\1\0\21\25\1\156\4\25\20\0"+
    "\3\25\5\0\3\25\1\0\15\25\1\157\10\25\20\0"+
    "\3\25\5\0\3\25\1\0\5\25\1\160\20\25\20\0"+
    "\3\25\5\0\3\25\1\0\20\25\1\161\5\25\20\0"+
    "\3\25\5\0\3\25\1\0\1\25\1\162\24\25\20\0"+
    "\3\25\5\0\3\25\1\0\14\25\1\163\11\25\20\0"+
    "\3\25\5\0\3\25\1\0\6\25\1\164\17\25\20\0"+
    "\3\25\5\0\3\25\1\0\22\25\1\165\3\25\20\0"+
    "\3\25\5\0\3\25\1\0\20\25\1\166\5\25\20\0"+
    "\3\25\5\0\3\25\1\0\13\25\1\167\12\25\20\0"+
    "\3\25\5\0\3\25\1\0\15\25\1\170\10\25\20\0"+
    "\3\25\5\0\3\25\1\0\17\25\1\171\6\25\20\0"+
    "\3\25\5\0\3\25\1\0\14\25\1\172\11\25\20\0"+
    "\3\25\5\0\3\25\1\0\21\25\1\173\4\25\20\0"+
    "\3\25\5\0\3\25\1\0\21\25\1\174\4\25\20\0"+
    "\3\25\5\0\3\25\1\0\14\25\1\175\11\25\20\0"+
    "\3\25\5\0\3\25\1\0\24\25\1\176\1\25\20\0"+
    "\3\25\5\0\3\25\1\0\11\25\1\177\14\25\20\0"+
    "\3\25\5\0\3\25\1\0\3\25\1\200\15\25\1\201"+
    "\4\25\20\0\3\25\5\0\3\25\1\0\15\25\1\202"+
    "\10\25\20\0\3\25\5\0\3\25\1\0\7\25\1\203"+
    "\15\25\1\204\20\0\3\25\5\0\3\25\1\0\1\25"+
    "\1\205\15\25\1\206\6\25\20\0\3\25\5\0\3\25"+
    "\1\0\11\25\1\207\14\25\20\0\3\25\5\0\3\25"+
    "\1\0\22\25\1\210\3\25\20\0\3\25\5\0\3\25"+
    "\1\0\21\25\1\211\4\25\20\0\3\25\5\0\3\25"+
    "\1\0\11\25\1\212\1\25\1\213\12\25\20\0\3\25"+
    "\5\0\3\25\1\0\11\25\1\214\14\25\12\0\1\215"+
    "\61\0\1\216\61\0\1\217\61\0\1\220\61\0\1\221"+
    "\61\0\1\222\61\0\1\223\61\0\1\224\61\0\1\225"+
    "\61\0\1\226\61\0\1\227\61\0\1\230\47\0\13\55"+
    "\1\150\3\55\1\151\42\55\3\0\1\151\76\0\3\153"+
    "\1\231\4\0\1\153\4\0\6\153\37\0\3\155\57\0"+
    "\3\25\5\0\3\25\1\0\15\25\1\232\10\25\20\0"+
    "\3\25\5\0\3\25\1\0\13\25\1\233\12\25\20\0"+
    "\3\25\5\0\3\25\1\0\1\25\1\234\24\25\20\0"+
    "\3\25\5\0\3\25\1\0\5\25\1\235\20\25\20\0"+
    "\3\25\5\0\3\25\1\0\17\25\1\236\6\25\20\0"+
    "\3\25\5\0\3\25\1\0\20\25\1\237\1\240\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\1\25\1\241\24\25"+
    "\20\0\3\25\5\0\3\25\1\0\2\25\1\242\23\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\243\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\20\25\1\244\5\25"+
    "\20\0\3\25\5\0\3\25\1\0\1\25\1\245\24\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\246\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\3\25\1\247\22\25"+
    "\20\0\3\25\5\0\3\25\1\0\15\25\1\250\10\25"+
    "\20\0\3\25\5\0\3\25\1\0\7\25\1\251\16\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\252\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\15\25\1\253\10\25"+
    "\20\0\3\25\5\0\3\25\1\0\22\25\1\254\3\25"+
    "\20\0\3\25\5\0\3\25\1\0\17\25\1\255\6\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\256\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\257\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\260\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\11\25\1\261\14\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\262\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\263\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\11\25\1\264\14\25"+
    "\20\0\3\25\5\0\3\25\1\0\4\25\1\265\21\25"+
    "\20\0\3\25\5\0\3\25\1\0\1\25\1\266\24\25"+
    "\20\0\3\25\5\0\3\25\1\0\13\25\1\267\12\25"+
    "\20\0\3\25\5\0\3\25\1\0\12\25\1\270\13\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\271\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\11\25\1\272\14\25"+
    "\20\0\3\25\5\0\3\25\1\0\22\25\1\273\3\25"+
    "\20\0\3\25\5\0\3\25\1\0\13\25\1\274\12\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\275\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\276\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\1\25\1\277\24\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\300\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\301\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\17\25\1\302\6\25"+
    "\20\0\3\25\5\0\3\25\1\0\17\25\1\303\6\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\304\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\305\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\15\25\1\306\10\25"+
    "\20\0\3\25\5\0\3\25\1\0\11\25\1\307\14\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\310\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\3\25\1\311\22\25"+
    "\20\0\3\25\5\0\3\25\1\0\13\25\1\312\12\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\313\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\314\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\315\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\13\25\1\316\12\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\317\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\3\25\1\320\22\25"+
    "\20\0\3\25\5\0\3\25\1\0\11\25\1\321\14\25"+
    "\20\0\3\25\5\0\3\25\1\0\13\25\1\322\12\25"+
    "\20\0\3\25\5\0\3\25\1\0\4\25\1\323\21\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\324\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\4\25\1\325\21\25"+
    "\20\0\3\25\5\0\3\25\1\0\6\25\1\326\17\25"+
    "\20\0\3\25\5\0\3\25\1\0\3\25\1\327\22\25"+
    "\20\0\3\25\5\0\3\25\1\0\7\25\1\330\16\25"+
    "\20\0\3\25\5\0\3\25\1\0\10\25\1\331\15\25"+
    "\20\0\3\25\5\0\3\25\1\0\11\25\1\332\14\25"+
    "\20\0\3\25\5\0\3\25\1\0\22\25\1\333\3\25"+
    "\20\0\3\25\5\0\3\25\1\0\21\25\1\334\4\25"+
    "\20\0\3\25\5\0\3\25\1\0\10\25\1\335\15\25"+
    "\20\0\3\25\5\0\3\25\1\0\15\25\1\336\10\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\337\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\13\25\1\340\12\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\341\20\25"+
    "\20\0\3\25\5\0\3\25\1\0\14\25\1\342\11\25"+
    "\20\0\3\25\5\0\3\25\1\0\5\25\1\343\20\25";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\2\1\3\11\33\1\2\11\1\1\2\0"+
    "\1\1\2\0\1\1\3\0\34\1\15\11\15\0\1\11"+
    "\1\1\2\0\40\1\15\11\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Symbol( TokenType.EOF, yyline, yycolumn, "EOF" );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol( TokenType.NOTHING, yyline, yycolumn, yytext() );
            }
            // fall through
          case 76: break;
          case 2:
            { return new Symbol( TokenType.TAB, yyline, yycolumn, "\t" );
            }
            // fall through
          case 77: break;
          case 3:
            { return new Symbol( TokenType.ENTER, yyline, yycolumn, "\n" );
            }
            // fall through
          case 78: break;
          case 4:
            { yybegin( STRING ); return new Symbol( TokenType.STRING, yyline, yycolumn, yytext() );
            }
            // fall through
          case 79: break;
          case 5:
            { return new Symbol( TokenType.OTHER, yyline, yycolumn,yytext() );
            }
            // fall through
          case 80: break;
          case 6:
            { yybegin( CHARACTER ); return new Symbol( TokenType.NORMAL_CHARACTER, yyline, yycolumn, "'" );
            }
            // fall through
          case 81: break;
          case 7:
            { return new Symbol( TokenType.INTEGERLITERAL, yyline, yycolumn, yytext() );
            }
            // fall through
          case 82: break;
          case 8:
            { return new Symbol( TokenType.LESSTHAN, yyline, yycolumn, "lessthan" );
            }
            // fall through
          case 83: break;
          case 9:
            { return new Symbol( TokenType.MORETHAN, yyline, yycolumn, "morethan" );
            }
            // fall through
          case 84: break;
          case 10:
            { return new Symbol( TokenType.IDENTIFIER, yyline, yycolumn,yytext()  );
            }
            // fall through
          case 85: break;
          case 11:
            { return new Symbol( TokenType.STRING, yyline, yycolumn, yytext() );
            }
            // fall through
          case 86: break;
          case 12:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.STRING, yyline, yycolumn, yytext() );
            }
            // fall through
          case 87: break;
          case 13:
            { return new Symbol( TokenType.FLOATLITERAL, yyline, yycolumn, yytext() );
            }
            // fall through
          case 88: break;
          case 14:
            { return new Symbol( TokenType.DO, yyline, yycolumn, "do" );
            }
            // fall through
          case 89: break;
          case 15:
            { return new Symbol( TokenType.IF, yyline, yycolumn, "if" );
            }
            // fall through
          case 90: break;
          case 16:
            { return new Symbol( TokenType.IN, yyline, yycolumn, "in" );
            }
            // fall through
          case 91: break;
          case 17:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\\"" );
            }
            // fall through
          case 92: break;
          case 18:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\'" );
            }
            // fall through
          case 93: break;
          case 19:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\0" );
            }
            // fall through
          case 94: break;
          case 20:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\?" );
            }
            // fall through
          case 95: break;
          case 21:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\\\" );
            }
            // fall through
          case 96: break;
          case 22:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\a" );
            }
            // fall through
          case 97: break;
          case 23:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\b" );
            }
            // fall through
          case 98: break;
          case 24:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\f" );
            }
            // fall through
          case 99: break;
          case 25:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\n" );
            }
            // fall through
          case 100: break;
          case 26:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\r" );
            }
            // fall through
          case 101: break;
          case 27:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\t" );
            }
            // fall through
          case 102: break;
          case 28:
            { return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\v" );
            }
            // fall through
          case 103: break;
          case 29:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.NORMAL_CHARACTER, yyline, yycolumn, yytext() );
            }
            // fall through
          case 104: break;
          case 30:
            { return new Symbol( TokenType.COMMENT, yyline, yycolumn, yytext() );
            }
            // fall through
          case 105: break;
          case 31:
            { return new Symbol( TokenType.FOR, yyline, yycolumn, "for" );
            }
            // fall through
          case 106: break;
          case 32:
            { return new Symbol( TokenType.INT, yyline, yycolumn, "int" );
            }
            // fall through
          case 107: break;
          case 33:
            { return new Symbol( TokenType.NEW, yyline, yycolumn, "new" );
            }
            // fall through
          case 108: break;
          case 34:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\\"'" );
            }
            // fall through
          case 109: break;
          case 35:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\''" );
            }
            // fall through
          case 110: break;
          case 36:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\0'" );
            }
            // fall through
          case 111: break;
          case 37:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\?'" );
            }
            // fall through
          case 112: break;
          case 38:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\\\'" );
            }
            // fall through
          case 113: break;
          case 39:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\a'" );
            }
            // fall through
          case 114: break;
          case 40:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\b'" );
            }
            // fall through
          case 115: break;
          case 41:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\f'" );
            }
            // fall through
          case 116: break;
          case 42:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\n'" );
            }
            // fall through
          case 117: break;
          case 43:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\r'" );
            }
            // fall through
          case 118: break;
          case 44:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\t'" );
            }
            // fall through
          case 119: break;
          case 45:
            { yybegin( YYINITIAL ); return new Symbol( TokenType.SPECIAL_CHARACTER, yyline, yycolumn, "\\v'" );
            }
            // fall through
          case 120: break;
          case 46:
            { return new Symbol( TokenType.AUTO, yyline, yycolumn, "auto" );
            }
            // fall through
          case 121: break;
          case 47:
            { return new Symbol( TokenType.BOOL, yyline, yycolumn, "bool" );
            }
            // fall through
          case 122: break;
          case 48:
            { return new Symbol( TokenType.CASE, yyline, yycolumn, "case" );
            }
            // fall through
          case 123: break;
          case 49:
            { return new Symbol( TokenType.CHAR, yyline, yycolumn, "char" );
            }
            // fall through
          case 124: break;
          case 50:
            { return new Symbol( TokenType.ELSE, yyline, yycolumn, "else" );
            }
            // fall through
          case 125: break;
          case 51:
            { return new Symbol( TokenType.GOTO, yyline, yycolumn, "goto" );
            }
            // fall through
          case 126: break;
          case 52:
            { return new Symbol( TokenType.LONG, yyline, yycolumn, "long" );
            }
            // fall through
          case 127: break;
          case 53:
            { return new Symbol( TokenType.TRUE, yyline, yycolumn, "true" );
            }
            // fall through
          case 128: break;
          case 54:
            { return new Symbol( TokenType.VOID, yyline, yycolumn, "void" );
            }
            // fall through
          case 129: break;
          case 55:
            { return new Symbol( TokenType.BREAK, yyline, yycolumn, "break" );
            }
            // fall through
          case 130: break;
          case 56:
            { return new Symbol( TokenType.CONST, yyline, yycolumn, "const" );
            }
            // fall through
          case 131: break;
          case 57:
            { return new Symbol( TokenType.FALSE, yyline, yycolumn, "false" );
            }
            // fall through
          case 132: break;
          case 58:
            { return new Symbol( TokenType.FLOAT, yyline, yycolumn, "float" );
            }
            // fall through
          case 133: break;
          case 59:
            { return new Symbol( TokenType.SHORT, yyline, yycolumn, "short" );
            }
            // fall through
          case 134: break;
          case 60:
            { return new Symbol( TokenType.UNTIL, yyline, yycolumn, "until" );
            }
            // fall through
          case 135: break;
          case 61:
            { return new Symbol( TokenType.WHILE, yyline, yycolumn, "while" );
            }
            // fall through
          case 136: break;
          case 62:
            { return new Symbol( TokenType.DOUBLE, yyline, yycolumn, "double" );
            }
            // fall through
          case 137: break;
          case 63:
            { return new Symbol( TokenType.RECORD, yyline, yycolumn, "record" );
            }
            // fall through
          case 138: break;
          case 64:
            { return new Symbol( TokenType.RETURN, yyline, yycolumn, "return" );
            }
            // fall through
          case 139: break;
          case 65:
            { return new Symbol( TokenType.SIGNED, yyline, yycolumn, "signed" );
            }
            // fall through
          case 140: break;
          case 66:
            { return new Symbol( TokenType.SIZEOF, yyline, yycolumn, "sizeof" );
            }
            // fall through
          case 141: break;
          case 67:
            { return new Symbol( TokenType.STATIC, yyline, yycolumn, "static" );
            }
            // fall through
          case 142: break;
          case 68:
            { return new Symbol( TokenType.STRING, yyline, yycolumn, "string" );
            }
            // fall through
          case 143: break;
          case 69:
            { return new Symbol( TokenType.SWITCH, yyline, yycolumn, "switch" );
            }
            // fall through
          case 144: break;
          case 70:
            { return new Symbol( TokenType.DEFAULT, yyline, yycolumn, "default" );
            }
            // fall through
          case 145: break;
          case 71:
            { return new Symbol( TokenType.FOREACH, yyline, yycolumn, "foreach" );
            }
            // fall through
          case 146: break;
          case 72:
            { return new Symbol( TokenType.PRINTLN, yyline, yycolumn, "println" );
            }
            // fall through
          case 147: break;
          case 73:
            { return new Symbol( TokenType.CONTINUE, yyline, yycolumn, "continue" );
            }
            // fall through
          case 148: break;
          case 74:
            { return new Symbol( TokenType.FUNCTION, yyline, yycolumn, "function" );
            }
            // fall through
          case 149: break;
          case 75:
            { return new Symbol( TokenType.VOLATILE, yyline, yycolumn, "volatile" );
            }
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
